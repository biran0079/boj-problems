package boj.solution;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Timeout;

import static org.junit.Assert.*;

/**
 * Created by biran on 10/27/16.
 */
public class MaxSubarrayProductionTest {

  @Rule
  public final Timeout globalTimeout = Timeout.seconds(1);
  private final MaxSubarrayProduction solver = new MaxSubarrayProduction();

  @Test
  public void test() {
    assertEquals(6.0, solver.maxProduct(new double[] {2.0, -2.0, 4.0, 1.5}), 1e-6);
    assertEquals(12.0, solver.maxProduct(new double[] {-2.0, 3.0, -2.0}), 1e-6);
    assertEquals(0.9238711495066281, solver.maxProduct(new double[]{0.9238711495066281}), 1e-6);
    assertEquals(0.549669701400433, solver.maxProduct(new double[]{-1.0378543373140565, 0.549669701400433}), 1e-6);
    assertEquals(0.39018111118880716, solver.maxProduct(new double[]{0.20174802047053575, 0.39018111118880716, -0.6671264020934009}), 1e-6);
    assertEquals(5.191728977938537, solver.maxProduct(new double[]{-0.459243261037126, 1.9393661607992358, 1.5167300714899206, 1.7649967179284576}), 1e-6);
    assertEquals(3.602231727765105, solver.maxProduct(new double[]{-0.9001841358580607, -1.484411396504893, -1.413593369413927, -1.9070475100644422, 0.18695902879386228}), 1e-6);
    assertEquals(2.1694837968267104, solver.maxProduct(new double[]{1.8579474427074003, -1.5820372549961133, 0.5005854538622372, -0.3568152180357531, 1.10524916509973, 1.962891142859132}), 1e-6);
    assertEquals(1.7204626495807953, solver.maxProduct(new double[]{-0.051068611879428794, 0.9849656212893221, 0.9326082807799754, 1.2691882856372976, 1.3555614001880731, 0.1067977384194645, 1.5973400464459742}), 1e-6);
    assertEquals(4.674691028967016, solver.maxProduct(new double[]{-1.464240637652431, -1.6677504071003404, 1.9142973605913611, 0.8894284767553948, 0.8601240554018976, -1.427118458797613, -0.14816872631030842, -1.9820575912684593}), 1e-6);
    assertEquals(3.966522842161, solver.maxProduct(new double[]{-1.7140067404804236, -0.6063190808333419, -0.6449213858569856, 1.4374262054185918, 1.886187955406851, 1.4629835208561532, 0.4503244188394726, -1.284048061884731, -1.129718351161256}), 1e-6);
    assertEquals(4.601496803775128, solver.maxProduct(new double[]{1.4179486681691627, -1.9613060107961027, 0.7691720278117331, 1.0852518646827183, 0.8507497125827572, -1.1550585002804152, 1.1323699590687175, 1.7813329558385158, -1.9430545795853282, -0.4231857888906756}), 1e-6);
    assertEquals(4.897749662042386, solver.maxProduct(new double[]{1.4151631012322912, 1.1441698032582104, 1.973887820023256, 1.532417623925916, -1.3188338790091843, 1.8482756728301544, 0.8971801343154753, 0.7094166449994979, 1.2175816688985428, -0.234292905296833, -0.15164803885602218}), 1e-6);
    assertEquals(12.685038170529486, solver.maxProduct(new double[]{1.411309866397843, 0.007339400822940156, 1.9677719216408676, 1.8770796397616643, -0.5875757112835274, -1.8109365232154824, -1.7135055063287976, -1.8835699491134568, -0.0653192395795994, 1.887800483814981, 1.956468603005622, 1.0697684120619595}), 1e-6);
    assertEquals(10.102364175130822, solver.maxProduct(new double[]{0.005589404048919722, -0.9778987564142261, -0.7633672510072493, 1.39312200108937, -1.7916618473040669, -1.959298181855083, -0.5845881211651522, -1.65304857933709, 1.4012460610572228, -1.9852923905771984, -0.7684273294621091, 0.12643422499519064, 1.6752568073542928}), 1e-6);
    assertEquals(1.7463591749976275, solver.maxProduct(new double[]{-0.8911598957251545, 1.4970488411327776, 0.43952605405105416, 1.6345568387869434, -1.8220375193728198, 0.5868956041555582, -0.01278494550937559, 0.02680638381141076, 0.08275527957179785, -0.5345570219440159, -0.08945235297231457, 0.8158788213705384, -0.7089288070271147, -1.9533806468938089}), 1e-6);
    assertEquals(5.198995378810963, solver.maxProduct(new double[]{0.8041557527296184, 0.9814114415662036, 0.42915299425047104, -1.0596730965433356, -0.4438272657854858, 1.645873447371943, -1.3304436456623723, -1.9843458775311165, -0.9404166901901134, 1.5712678286247406, -0.8097269403568741, -0.2843820826810499, 0.7502065527354551, -0.3660142611958963, -0.5877900022271212}), 1e-6);
    assertEquals(1.8924306046998378, solver.maxProduct(new double[]{0.6870342699981475, 0.961668720677531, 1.5777408980253727, 0.3198311330746688, 0.04302191979303904, -0.7521210522648341, 0.1609176166856794, 1.8924306046998378, 0.45455041010903496, -1.8913237525244537, 0.7560700581653679, 0.5211571038248182, 1.2713500243402085, 0.9644733857378971, 0.525720322927516, -0.7404306059641788}), 1e-6);
    assertEquals(2.7689758815312606, solver.maxProduct(new double[]{1.0014065517797905, -1.2391210549655098, -1.509994689980994, 0.8531559841415728, 1.7321725284261542, -0.7555648929464169, 0.11813110244995251, -1.2840882219271674, -1.5444719014493469, 0.7357653258722454, -0.4829998720639308, 0.36971617049703465, 1.7624370608684794, 0.13658213875810743, -1.1432212221086342, -0.6650812912616626, -0.9978552940454382}), 1e-6);
    assertEquals(7.5579746865595006, solver.maxProduct(new double[]{0.9421614599245149, -1.6354137522962917, -0.9418104620547041, -1.2453269689216326, -0.8089544727197926, 1.0338835198206309, -1.813647883672365, -1.655725728406786, 1.568894786082133, 0.138555046386172, -1.6574307241452764, 0.1254101827789076, -1.706437756098945, -1.2929238101280385, 1.5339111014887954, -0.5982686918638156, 1.9436233049080598, 0.3035701537533866}), 1e-6);
    assertEquals(6.329812620334157, solver.maxProduct(new double[]{0.4169898384673911, -0.9075654602693222, 0.05274739041988186, 1.7789610397963593, -1.1289981989503013, 1.6392869579331717, -1.9225435405875309, -0.9031625002686918, 0.6751739350813466, -0.8484928083364172, -1.744030454278128, -1.0949515746519882, -1.4397320241016676, 0.4146030948543973, 0.9109912242471792, -0.7845439034194643, 0.5014521552036841, -1.8568289145081307, -0.09054546060281554}), 1e-6);
  }

  @Test
  public void test2() {
    double[] a = new double[100000];
    for (int i = 0; i < a.length; i++) {
      a[i] = (i % 3 == 2 ? 1 : -1) * 1.0001;
    }
    assertEquals(22013.254723055554, solver.maxProduct(a), 1.0);
  }
}