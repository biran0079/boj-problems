package boj.solution.catchthethief;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Timeout;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

/**
 * Created by biran on 11/3/16.
 */
public class CatchTheThiefTest {

  @Rule
  public final Timeout globalTimeout = Timeout.seconds(1);
  private final CatchTheThief solver = new CatchTheThief();
  private final int[][] canCatch = new int[][] {
      {},
      {0},
      {0, 0},
      {1, 1},
      {1, 2, 2, 1},
      {1, 2, 3, 1, 2, 3},
      {1, 2, 3, 4, 4, 3, 2, 1},
      {1, 2, 3, 4, 5, 1, 2, 3, 4, 5},
      {1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1},
      {1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7},
      {1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1},
      {1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9},
      {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1},
      {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
      {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1},
      {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13},
      {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1},
      {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
      {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1},
      {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17},
  };

  @Test
  public void testCanCatch() {
    for (int i = 0; i < canCatch.length; i++) {
      assertTrue(solver.solve(i, canCatch[i]));
    }
  }

  @Test
  public void testCannotCatch() {
    int[][] cannotCatch = new int[][] {
        {2, 3, 0, 2, 2, 1, 2, 0},
        {4, 4, 2, 2, 3, 2, 0, 4, 4, 0},
        {5, 2, 1, 0, 2, 5, 2, 4, 3, 4, 0, 5},
        {0, 3, 2, 0, 4, 3, 3, 0, 3, 1, 0, 5, 3, 0},
        {5, 7, 5, 4, 6, 0, 6, 3, 4, 5, 7, 7, 1, 4, 0, 1},
        {8, 7, 7, 6, 3, 6, 7, 8, 7, 0, 2, 4, 8, 2, 8, 6, 5, 0},
        {5, 0, 7, 3, 7, 9, 5, 2, 9, 3, 1, 1, 3, 0, 8, 4, 6, 3, 7, 2},
        {1, 10, 2, 5, 2, 9, 3, 6, 9, 4, 10, 7, 5, 7, 4, 6, 2, 10, 3, 10, 1, 0},
        {3, 2, 2, 1, 10, 8, 4, 2, 4, 6, 0, 5, 9, 5, 1, 10, 5, 2, 10, 3, 1, 11, 11, 11},
        {11, 6, 3, 2, 4, 2, 6, 4, 0, 6, 0, 3, 1, 1, 5, 8, 10, 2, 10, 9, 2, 9, 11, 0, 8, 5},
        {2, 10, 12, 1, 11, 11, 11, 1, 12, 9, 9, 9, 10, 11, 0, 3, 5, 10, 4, 11, 12, 5, 5, 1, 1, 2, 12, 8},
        {9, 13, 10, 2, 9, 8, 3, 0, 5, 1, 8, 7, 9, 14, 12, 3, 9, 2, 9, 4, 10, 5, 13, 5, 7, 10, 2, 12, 10, 3},
        {14, 12, 4, 3, 6, 5, 11, 6, 6, 10, 5, 2, 10, 5, 11, 13, 14, 13, 9, 0, 8, 0, 4, 10, 8, 9, 15, 0, 9, 6, 0, 14},
        {10, 4, 4, 3, 16, 1, 16, 7, 13, 3, 2, 10, 13, 15, 6, 9, 7, 6, 11, 7, 11, 14, 14, 6, 8, 9, 10, 12, 13, 9, 11, 5, 14, 13},
        {1, 8, 9, 16, 13, 4, 1, 6, 8, 5, 11, 10, 0, 1, 9, 12, 12, 16, 17, 6, 5, 0, 11, 15, 12, 17, 13, 13, 1, 4, 2, 14, 3, 13, 6, 7},
        {2, 11, 8, 5, 0, 12, 16, 9, 7, 6, 14, 11, 6, 16, 8, 7, 17, 2, 11, 18, 5, 11, 13, 14, 4, 9, 8, 12, 9, 8, 17, 7, 1, 14, 7, 11, 15, 8}
    };
    for (int i = 4; i < 20; i++) {
      assertFalse(solver.solve(i, cannotCatch[i - 4]));
    }
  }
}